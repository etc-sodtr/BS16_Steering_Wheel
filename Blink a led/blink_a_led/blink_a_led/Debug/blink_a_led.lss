
blink_a_led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000cb4  00000d48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000646  0080010c  0080010c  00000d54  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c6c  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f57  00000000  00000000  00003c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000177c  00000000  00000000  00004b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000610  00000000  00000000  00006318  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f91  00000000  00000000  00006928  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002269  00000000  00000000  000078b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00009b22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	8d c2       	rjmp	.+1306   	; 0x54c <__vector_12>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 eb       	ldi	r30, 0xB4	; 180
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 35       	cpi	r26, 0x52	; 82
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d6 d0       	rcall	.+428    	; 0x270 <main>
  c4:	f5 c5       	rjmp	.+3050   	; 0xcb0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
  ce:	d7 d3       	rcall	.+1966   	; 0x87e <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
  d0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
  d4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
  d8:	89 2b       	or	r24, r25
  da:	31 f4       	brne	.+12     	; 0xe8 <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  dc:	81 e1       	ldi	r24, 0x11	; 17
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
  e4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  e8:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <xNextFreeByte>
  ec:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <xNextFreeByte+0x1>
  f0:	ce 01       	movw	r24, r28
  f2:	82 0f       	add	r24, r18
  f4:	93 1f       	adc	r25, r19
  f6:	8b 3d       	cpi	r24, 0xDB	; 219
  f8:	45 e0       	ldi	r20, 0x05	; 5
  fa:	94 07       	cpc	r25, r20
  fc:	70 f4       	brcc	.+28     	; 0x11a <pvPortMalloc+0x52>
  fe:	28 17       	cp	r18, r24
 100:	39 07       	cpc	r19, r25
 102:	70 f4       	brcc	.+28     	; 0x120 <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 104:	c0 91 0c 01 	lds	r28, 0x010C	; 0x80010c <__data_end>
 108:	d0 91 0d 01 	lds	r29, 0x010D	; 0x80010d <__data_end+0x1>
 10c:	c2 0f       	add	r28, r18
 10e:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
 110:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <xNextFreeByte+0x1>
 114:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <xNextFreeByte>
 118:	05 c0       	rjmp	.+10     	; 0x124 <pvPortMalloc+0x5c>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
 11a:	c0 e0       	ldi	r28, 0x00	; 0
 11c:	d0 e0       	ldi	r29, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <pvPortMalloc+0x5c>
 120:	c0 e0       	ldi	r28, 0x00	; 0
 122:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 124:	73 d4       	rcall	.+2278   	; 0xa0c <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 126:	ce 01       	movw	r24, r28
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 12e:	08 95       	ret

00000130 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 130:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 132:	03 96       	adiw	r24, 0x03	; 3
 134:	92 83       	std	Z+2, r25	; 0x02
 136:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	3f ef       	ldi	r19, 0xFF	; 255
 13c:	34 83       	std	Z+4, r19	; 0x04
 13e:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 140:	96 83       	std	Z+6, r25	; 0x06
 142:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 144:	90 87       	std	Z+8, r25	; 0x08
 146:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 148:	10 82       	st	Z, r1
 14a:	08 95       	ret

0000014c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 14c:	fc 01       	movw	r30, r24
 14e:	11 86       	std	Z+9, r1	; 0x09
 150:	10 86       	std	Z+8, r1	; 0x08
 152:	08 95       	ret

00000154 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	9c 01       	movw	r18, r24
 15a:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
 15c:	dc 01       	movw	r26, r24
 15e:	11 96       	adiw	r26, 0x01	; 1
 160:	cd 91       	ld	r28, X+
 162:	dc 91       	ld	r29, X
 164:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 166:	d3 83       	std	Z+3, r29	; 0x03
 168:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 16a:	8c 81       	ldd	r24, Y+4	; 0x04
 16c:	9d 81       	ldd	r25, Y+5	; 0x05
 16e:	95 83       	std	Z+5, r25	; 0x05
 170:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 172:	8c 81       	ldd	r24, Y+4	; 0x04
 174:	9d 81       	ldd	r25, Y+5	; 0x05
 176:	dc 01       	movw	r26, r24
 178:	13 96       	adiw	r26, 0x03	; 3
 17a:	7c 93       	st	X, r23
 17c:	6e 93       	st	-X, r22
 17e:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
 180:	7d 83       	std	Y+5, r23	; 0x05
 182:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 184:	31 87       	std	Z+9, r19	; 0x09
 186:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
 188:	f9 01       	movw	r30, r18
 18a:	80 81       	ld	r24, Z
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	80 83       	st	Z, r24
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 19c:	48 81       	ld	r20, Y
 19e:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 1a0:	4f 3f       	cpi	r20, 0xFF	; 255
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	52 07       	cpc	r21, r18
 1a6:	21 f4       	brne	.+8      	; 0x1b0 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 1a8:	fc 01       	movw	r30, r24
 1aa:	a7 81       	ldd	r26, Z+7	; 0x07
 1ac:	b0 85       	ldd	r27, Z+8	; 0x08
 1ae:	0d c0       	rjmp	.+26     	; 0x1ca <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 1b0:	dc 01       	movw	r26, r24
 1b2:	13 96       	adiw	r26, 0x03	; 3
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <vListInsert+0x22>
 1b6:	df 01       	movw	r26, r30
 1b8:	12 96       	adiw	r26, 0x02	; 2
 1ba:	ed 91       	ld	r30, X+
 1bc:	fc 91       	ld	r31, X
 1be:	13 97       	sbiw	r26, 0x03	; 3
 1c0:	20 81       	ld	r18, Z
 1c2:	31 81       	ldd	r19, Z+1	; 0x01
 1c4:	42 17       	cp	r20, r18
 1c6:	53 07       	cpc	r21, r19
 1c8:	b0 f7       	brcc	.-20     	; 0x1b6 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1ca:	12 96       	adiw	r26, 0x02	; 2
 1cc:	ed 91       	ld	r30, X+
 1ce:	fc 91       	ld	r31, X
 1d0:	13 97       	sbiw	r26, 0x03	; 3
 1d2:	fb 83       	std	Y+3, r31	; 0x03
 1d4:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 1d6:	d5 83       	std	Z+5, r29	; 0x05
 1d8:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
 1da:	bd 83       	std	Y+5, r27	; 0x05
 1dc:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
 1de:	13 96       	adiw	r26, 0x03	; 3
 1e0:	dc 93       	st	X, r29
 1e2:	ce 93       	st	-X, r28
 1e4:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1e6:	99 87       	std	Y+9, r25	; 0x09
 1e8:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 81       	ld	r18, Z
 1ee:	2f 5f       	subi	r18, 0xFF	; 255
 1f0:	20 83       	st	Z, r18
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 1fe:	a0 85       	ldd	r26, Z+8	; 0x08
 200:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 202:	c2 81       	ldd	r28, Z+2	; 0x02
 204:	d3 81       	ldd	r29, Z+3	; 0x03
 206:	84 81       	ldd	r24, Z+4	; 0x04
 208:	95 81       	ldd	r25, Z+5	; 0x05
 20a:	9d 83       	std	Y+5, r25	; 0x05
 20c:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20e:	c4 81       	ldd	r28, Z+4	; 0x04
 210:	d5 81       	ldd	r29, Z+5	; 0x05
 212:	82 81       	ldd	r24, Z+2	; 0x02
 214:	93 81       	ldd	r25, Z+3	; 0x03
 216:	9b 83       	std	Y+3, r25	; 0x03
 218:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 21a:	11 96       	adiw	r26, 0x01	; 1
 21c:	cd 91       	ld	r28, X+
 21e:	dc 91       	ld	r29, X
 220:	12 97       	sbiw	r26, 0x02	; 2
 222:	ce 17       	cp	r28, r30
 224:	df 07       	cpc	r29, r31
 226:	31 f4       	brne	.+12     	; 0x234 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 228:	8c 81       	ldd	r24, Y+4	; 0x04
 22a:	9d 81       	ldd	r25, Y+5	; 0x05
 22c:	12 96       	adiw	r26, 0x02	; 2
 22e:	9c 93       	st	X, r25
 230:	8e 93       	st	-X, r24
 232:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 234:	11 86       	std	Z+9, r1	; 0x09
 236:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 238:	8c 91       	ld	r24, X
 23a:	81 50       	subi	r24, 0x01	; 1
 23c:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <blink>:
//Last update:2014.11.28;
//These defines are independent by other files;

#define NOP asm("nop")//OK;
void NOPS(int nopNo){while(nopNo--){NOP;}}
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	00 d0       	rcall	.+0      	; 0x24a <blink+0x6>
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
 24e:	1d d3       	rcall	.+1594   	; 0x88a <xTaskGetTickCount>
 250:	9a 83       	std	Y+2, r25	; 0x02
 252:	89 83       	std	Y+1, r24	; 0x01
 254:	05 e6       	ldi	r16, 0x65	; 101
 256:	10 e0       	ldi	r17, 0x00	; 0
 258:	ff 24       	eor	r15, r15
 25a:	f3 94       	inc	r15
 25c:	68 ec       	ldi	r22, 0xC8	; 200
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	ce 01       	movw	r24, r28
 262:	01 96       	adiw	r24, 0x01	; 1
 264:	4c d4       	rcall	.+2200   	; 0xafe <vTaskDelayUntil>
 266:	f8 01       	movw	r30, r16
 268:	80 81       	ld	r24, Z
 26a:	8f 25       	eor	r24, r15
 26c:	80 83       	st	Z, r24
 26e:	f6 cf       	rjmp	.-20     	; 0x25c <blink+0x18>

00000270 <main>:


/*-----------------------------------------------------------*/

int main( void )
{
 270:	ef 92       	push	r14
 272:	ff 92       	push	r15
 274:	0f 93       	push	r16
	// initialize port
	DDRG=0x01;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	PORTG = 0x01;
 27c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
	
	

	// create blinking task
	xTaskCreate( blink, "Blink", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 280:	e1 2c       	mov	r14, r1
 282:	f1 2c       	mov	r15, r1
 284:	01 e0       	ldi	r16, 0x01	; 1
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	45 e5       	ldi	r20, 0x55	; 85
 28c:	50 e0       	ldi	r21, 0x00	; 0
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	71 e0       	ldi	r23, 0x01	; 1
 292:	82 e2       	ldi	r24, 0x22	; 34
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	cf d1       	rcall	.+926    	; 0x636 <xTaskCreate>

	// start the scheduler
	vTaskStartScheduler();
 298:	ca d2       	rcall	.+1428   	; 0x82e <vTaskStartScheduler>

	return 0;
}
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0f 91       	pop	r16
 2a0:	ff 90       	pop	r15
 2a2:	ef 90       	pop	r14
 2a4:	08 95       	ret

000002a6 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 2a6:	31 e1       	ldi	r19, 0x11	; 17
 2a8:	fc 01       	movw	r30, r24
 2aa:	30 83       	st	Z, r19
 2ac:	31 97       	sbiw	r30, 0x01	; 1
 2ae:	22 e2       	ldi	r18, 0x22	; 34
 2b0:	20 83       	st	Z, r18
 2b2:	31 97       	sbiw	r30, 0x01	; 1
 2b4:	a3 e3       	ldi	r26, 0x33	; 51
 2b6:	a0 83       	st	Z, r26
 2b8:	31 97       	sbiw	r30, 0x01	; 1
 2ba:	60 83       	st	Z, r22
 2bc:	31 97       	sbiw	r30, 0x01	; 1
 2be:	70 83       	st	Z, r23
 2c0:	31 97       	sbiw	r30, 0x01	; 1
 2c2:	10 82       	st	Z, r1
 2c4:	31 97       	sbiw	r30, 0x01	; 1
 2c6:	60 e8       	ldi	r22, 0x80	; 128
 2c8:	60 83       	st	Z, r22
 2ca:	31 97       	sbiw	r30, 0x01	; 1
 2cc:	10 82       	st	Z, r1
 2ce:	31 97       	sbiw	r30, 0x01	; 1
 2d0:	62 e0       	ldi	r22, 0x02	; 2
 2d2:	60 83       	st	Z, r22
 2d4:	31 97       	sbiw	r30, 0x01	; 1
 2d6:	63 e0       	ldi	r22, 0x03	; 3
 2d8:	60 83       	st	Z, r22
 2da:	31 97       	sbiw	r30, 0x01	; 1
 2dc:	64 e0       	ldi	r22, 0x04	; 4
 2de:	60 83       	st	Z, r22
 2e0:	31 97       	sbiw	r30, 0x01	; 1
 2e2:	65 e0       	ldi	r22, 0x05	; 5
 2e4:	60 83       	st	Z, r22
 2e6:	31 97       	sbiw	r30, 0x01	; 1
 2e8:	66 e0       	ldi	r22, 0x06	; 6
 2ea:	60 83       	st	Z, r22
 2ec:	31 97       	sbiw	r30, 0x01	; 1
 2ee:	67 e0       	ldi	r22, 0x07	; 7
 2f0:	60 83       	st	Z, r22
 2f2:	31 97       	sbiw	r30, 0x01	; 1
 2f4:	68 e0       	ldi	r22, 0x08	; 8
 2f6:	60 83       	st	Z, r22
 2f8:	31 97       	sbiw	r30, 0x01	; 1
 2fa:	69 e0       	ldi	r22, 0x09	; 9
 2fc:	60 83       	st	Z, r22
 2fe:	31 97       	sbiw	r30, 0x01	; 1
 300:	60 e1       	ldi	r22, 0x10	; 16
 302:	60 83       	st	Z, r22
 304:	31 97       	sbiw	r30, 0x01	; 1
 306:	30 83       	st	Z, r19
 308:	31 97       	sbiw	r30, 0x01	; 1
 30a:	32 e1       	ldi	r19, 0x12	; 18
 30c:	30 83       	st	Z, r19
 30e:	31 97       	sbiw	r30, 0x01	; 1
 310:	33 e1       	ldi	r19, 0x13	; 19
 312:	30 83       	st	Z, r19
 314:	31 97       	sbiw	r30, 0x01	; 1
 316:	34 e1       	ldi	r19, 0x14	; 20
 318:	30 83       	st	Z, r19
 31a:	31 97       	sbiw	r30, 0x01	; 1
 31c:	35 e1       	ldi	r19, 0x15	; 21
 31e:	30 83       	st	Z, r19
 320:	31 97       	sbiw	r30, 0x01	; 1
 322:	36 e1       	ldi	r19, 0x16	; 22
 324:	30 83       	st	Z, r19
 326:	31 97       	sbiw	r30, 0x01	; 1
 328:	37 e1       	ldi	r19, 0x17	; 23
 32a:	30 83       	st	Z, r19
 32c:	31 97       	sbiw	r30, 0x01	; 1
 32e:	38 e1       	ldi	r19, 0x18	; 24
 330:	30 83       	st	Z, r19
 332:	31 97       	sbiw	r30, 0x01	; 1
 334:	39 e1       	ldi	r19, 0x19	; 25
 336:	30 83       	st	Z, r19
 338:	31 97       	sbiw	r30, 0x01	; 1
 33a:	30 e2       	ldi	r19, 0x20	; 32
 33c:	30 83       	st	Z, r19
 33e:	31 97       	sbiw	r30, 0x01	; 1
 340:	31 e2       	ldi	r19, 0x21	; 33
 342:	30 83       	st	Z, r19
 344:	31 97       	sbiw	r30, 0x01	; 1
 346:	20 83       	st	Z, r18
 348:	31 97       	sbiw	r30, 0x01	; 1
 34a:	23 e2       	ldi	r18, 0x23	; 35
 34c:	20 83       	st	Z, r18
 34e:	31 97       	sbiw	r30, 0x01	; 1
 350:	40 83       	st	Z, r20
 352:	31 97       	sbiw	r30, 0x01	; 1
 354:	50 83       	st	Z, r21
 356:	31 97       	sbiw	r30, 0x01	; 1
 358:	26 e2       	ldi	r18, 0x26	; 38
 35a:	20 83       	st	Z, r18
 35c:	31 97       	sbiw	r30, 0x01	; 1
 35e:	27 e2       	ldi	r18, 0x27	; 39
 360:	20 83       	st	Z, r18
 362:	31 97       	sbiw	r30, 0x01	; 1
 364:	28 e2       	ldi	r18, 0x28	; 40
 366:	20 83       	st	Z, r18
 368:	31 97       	sbiw	r30, 0x01	; 1
 36a:	29 e2       	ldi	r18, 0x29	; 41
 36c:	20 83       	st	Z, r18
 36e:	31 97       	sbiw	r30, 0x01	; 1
 370:	20 e3       	ldi	r18, 0x30	; 48
 372:	20 83       	st	Z, r18
 374:	31 97       	sbiw	r30, 0x01	; 1
 376:	21 e3       	ldi	r18, 0x31	; 49
 378:	20 83       	st	Z, r18
 37a:	86 97       	sbiw	r24, 0x26	; 38
 37c:	08 95       	ret

0000037e <xPortStartScheduler>:
 37e:	1b bc       	out	0x2b, r1	; 43
 380:	87 ed       	ldi	r24, 0xD7	; 215
 382:	8a bd       	out	0x2a, r24	; 42
 384:	8b e0       	ldi	r24, 0x0B	; 11
 386:	8e bd       	out	0x2e, r24	; 46
 388:	87 b7       	in	r24, 0x37	; 55
 38a:	80 61       	ori	r24, 0x10	; 16
 38c:	87 bf       	out	0x37, r24	; 55
 38e:	a0 91 50 07 	lds	r26, 0x0750	; 0x800750 <pxCurrentTCB>
 392:	b0 91 51 07 	lds	r27, 0x0751	; 0x800751 <pxCurrentTCB+0x1>
 396:	cd 91       	ld	r28, X+
 398:	cd bf       	out	0x3d, r28	; 61
 39a:	dd 91       	ld	r29, X+
 39c:	de bf       	out	0x3e, r29	; 62
 39e:	ff 91       	pop	r31
 3a0:	ef 91       	pop	r30
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	bf 91       	pop	r27
 3a8:	af 91       	pop	r26
 3aa:	9f 91       	pop	r25
 3ac:	8f 91       	pop	r24
 3ae:	7f 91       	pop	r23
 3b0:	6f 91       	pop	r22
 3b2:	5f 91       	pop	r21
 3b4:	4f 91       	pop	r20
 3b6:	3f 91       	pop	r19
 3b8:	2f 91       	pop	r18
 3ba:	1f 91       	pop	r17
 3bc:	0f 91       	pop	r16
 3be:	ff 90       	pop	r15
 3c0:	ef 90       	pop	r14
 3c2:	df 90       	pop	r13
 3c4:	cf 90       	pop	r12
 3c6:	bf 90       	pop	r11
 3c8:	af 90       	pop	r10
 3ca:	9f 90       	pop	r9
 3cc:	8f 90       	pop	r8
 3ce:	7f 90       	pop	r7
 3d0:	6f 90       	pop	r6
 3d2:	5f 90       	pop	r5
 3d4:	4f 90       	pop	r4
 3d6:	3f 90       	pop	r3
 3d8:	2f 90       	pop	r2
 3da:	1f 90       	pop	r1
 3dc:	0f 90       	pop	r0
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	0f 90       	pop	r0
 3e2:	08 95       	ret
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	08 95       	ret

000003e8 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 3e8:	0f 92       	push	r0
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	f8 94       	cli
 3ee:	0f 92       	push	r0
 3f0:	1f 92       	push	r1
 3f2:	11 24       	eor	r1, r1
 3f4:	2f 92       	push	r2
 3f6:	3f 92       	push	r3
 3f8:	4f 92       	push	r4
 3fa:	5f 92       	push	r5
 3fc:	6f 92       	push	r6
 3fe:	7f 92       	push	r7
 400:	8f 92       	push	r8
 402:	9f 92       	push	r9
 404:	af 92       	push	r10
 406:	bf 92       	push	r11
 408:	cf 92       	push	r12
 40a:	df 92       	push	r13
 40c:	ef 92       	push	r14
 40e:	ff 92       	push	r15
 410:	0f 93       	push	r16
 412:	1f 93       	push	r17
 414:	2f 93       	push	r18
 416:	3f 93       	push	r19
 418:	4f 93       	push	r20
 41a:	5f 93       	push	r21
 41c:	6f 93       	push	r22
 41e:	7f 93       	push	r23
 420:	8f 93       	push	r24
 422:	9f 93       	push	r25
 424:	af 93       	push	r26
 426:	bf 93       	push	r27
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
 42c:	ef 93       	push	r30
 42e:	ff 93       	push	r31
 430:	a0 91 50 07 	lds	r26, 0x0750	; 0x800750 <pxCurrentTCB>
 434:	b0 91 51 07 	lds	r27, 0x0751	; 0x800751 <pxCurrentTCB+0x1>
 438:	0d b6       	in	r0, 0x3d	; 61
 43a:	0d 92       	st	X+, r0
 43c:	0e b6       	in	r0, 0x3e	; 62
 43e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 440:	d1 d3       	rcall	.+1954   	; 0xbe4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 442:	a0 91 50 07 	lds	r26, 0x0750	; 0x800750 <pxCurrentTCB>
 446:	b0 91 51 07 	lds	r27, 0x0751	; 0x800751 <pxCurrentTCB+0x1>
 44a:	cd 91       	ld	r28, X+
 44c:	cd bf       	out	0x3d, r28	; 61
 44e:	dd 91       	ld	r29, X+
 450:	de bf       	out	0x3e, r29	; 62
 452:	ff 91       	pop	r31
 454:	ef 91       	pop	r30
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	bf 91       	pop	r27
 45c:	af 91       	pop	r26
 45e:	9f 91       	pop	r25
 460:	8f 91       	pop	r24
 462:	7f 91       	pop	r23
 464:	6f 91       	pop	r22
 466:	5f 91       	pop	r21
 468:	4f 91       	pop	r20
 46a:	3f 91       	pop	r19
 46c:	2f 91       	pop	r18
 46e:	1f 91       	pop	r17
 470:	0f 91       	pop	r16
 472:	ff 90       	pop	r15
 474:	ef 90       	pop	r14
 476:	df 90       	pop	r13
 478:	cf 90       	pop	r12
 47a:	bf 90       	pop	r11
 47c:	af 90       	pop	r10
 47e:	9f 90       	pop	r9
 480:	8f 90       	pop	r8
 482:	7f 90       	pop	r7
 484:	6f 90       	pop	r6
 486:	5f 90       	pop	r5
 488:	4f 90       	pop	r4
 48a:	3f 90       	pop	r3
 48c:	2f 90       	pop	r2
 48e:	1f 90       	pop	r1
 490:	0f 90       	pop	r0
 492:	0f be       	out	0x3f, r0	; 63
 494:	0f 90       	pop	r0

	asm volatile ( "ret" );
 496:	08 95       	ret

00000498 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 498:	0f 92       	push	r0
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	f8 94       	cli
 49e:	0f 92       	push	r0
 4a0:	1f 92       	push	r1
 4a2:	11 24       	eor	r1, r1
 4a4:	2f 92       	push	r2
 4a6:	3f 92       	push	r3
 4a8:	4f 92       	push	r4
 4aa:	5f 92       	push	r5
 4ac:	6f 92       	push	r6
 4ae:	7f 92       	push	r7
 4b0:	8f 92       	push	r8
 4b2:	9f 92       	push	r9
 4b4:	af 92       	push	r10
 4b6:	bf 92       	push	r11
 4b8:	cf 92       	push	r12
 4ba:	df 92       	push	r13
 4bc:	ef 92       	push	r14
 4be:	ff 92       	push	r15
 4c0:	0f 93       	push	r16
 4c2:	1f 93       	push	r17
 4c4:	2f 93       	push	r18
 4c6:	3f 93       	push	r19
 4c8:	4f 93       	push	r20
 4ca:	5f 93       	push	r21
 4cc:	6f 93       	push	r22
 4ce:	7f 93       	push	r23
 4d0:	8f 93       	push	r24
 4d2:	9f 93       	push	r25
 4d4:	af 93       	push	r26
 4d6:	bf 93       	push	r27
 4d8:	cf 93       	push	r28
 4da:	df 93       	push	r29
 4dc:	ef 93       	push	r30
 4de:	ff 93       	push	r31
 4e0:	a0 91 50 07 	lds	r26, 0x0750	; 0x800750 <pxCurrentTCB>
 4e4:	b0 91 51 07 	lds	r27, 0x0751	; 0x800751 <pxCurrentTCB+0x1>
 4e8:	0d b6       	in	r0, 0x3d	; 61
 4ea:	0d 92       	st	X+, r0
 4ec:	0e b6       	in	r0, 0x3e	; 62
 4ee:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 4f0:	d6 d1       	rcall	.+940    	; 0x89e <xTaskIncrementTick>
 4f2:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 4f4:	77 d3       	rcall	.+1774   	; 0xbe4 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 4f6:	a0 91 50 07 	lds	r26, 0x0750	; 0x800750 <pxCurrentTCB>
 4fa:	b0 91 51 07 	lds	r27, 0x0751	; 0x800751 <pxCurrentTCB+0x1>
 4fe:	cd 91       	ld	r28, X+
 500:	cd bf       	out	0x3d, r28	; 61
 502:	dd 91       	ld	r29, X+
 504:	de bf       	out	0x3e, r29	; 62
 506:	ff 91       	pop	r31
 508:	ef 91       	pop	r30
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	bf 91       	pop	r27
 510:	af 91       	pop	r26
 512:	9f 91       	pop	r25
 514:	8f 91       	pop	r24
 516:	7f 91       	pop	r23
 518:	6f 91       	pop	r22
 51a:	5f 91       	pop	r21
 51c:	4f 91       	pop	r20
 51e:	3f 91       	pop	r19
 520:	2f 91       	pop	r18
 522:	1f 91       	pop	r17
 524:	0f 91       	pop	r16
 526:	ff 90       	pop	r15
 528:	ef 90       	pop	r14
 52a:	df 90       	pop	r13
 52c:	cf 90       	pop	r12
 52e:	bf 90       	pop	r11
 530:	af 90       	pop	r10
 532:	9f 90       	pop	r9
 534:	8f 90       	pop	r8
 536:	7f 90       	pop	r7
 538:	6f 90       	pop	r6
 53a:	5f 90       	pop	r5
 53c:	4f 90       	pop	r4
 53e:	3f 90       	pop	r3
 540:	2f 90       	pop	r2
 542:	1f 90       	pop	r1
 544:	0f 90       	pop	r0
 546:	0f be       	out	0x3f, r0	; 63
 548:	0f 90       	pop	r0

	asm volatile ( "ret" );
 54a:	08 95       	ret

0000054c <__vector_12>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 54c:	a5 df       	rcall	.-182    	; 0x498 <vPortYieldFromTick>
		asm volatile ( "reti" );
 54e:	18 95       	reti

00000550 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 550:	e0 91 18 07 	lds	r30, 0x0718	; 0x800718 <pxDelayedTaskList>
 554:	f0 91 19 07 	lds	r31, 0x0719	; 0x800719 <pxDelayedTaskList+0x1>
 558:	80 81       	ld	r24, Z
 55a:	81 11       	cpse	r24, r1
 55c:	07 c0       	rjmp	.+14     	; 0x56c <prvResetNextTaskUnblockTime+0x1c>
 55e:	8f ef       	ldi	r24, 0xFF	; 255
 560:	9f ef       	ldi	r25, 0xFF	; 255
 562:	90 93 f0 06 	sts	0x06F0, r25	; 0x8006f0 <xNextTaskUnblockTime+0x1>
 566:	80 93 ef 06 	sts	0x06EF, r24	; 0x8006ef <xNextTaskUnblockTime>
 56a:	08 95       	ret
 56c:	e0 91 18 07 	lds	r30, 0x0718	; 0x800718 <pxDelayedTaskList>
 570:	f0 91 19 07 	lds	r31, 0x0719	; 0x800719 <pxDelayedTaskList+0x1>
 574:	05 80       	ldd	r0, Z+5	; 0x05
 576:	f6 81       	ldd	r31, Z+6	; 0x06
 578:	e0 2d       	mov	r30, r0
 57a:	06 80       	ldd	r0, Z+6	; 0x06
 57c:	f7 81       	ldd	r31, Z+7	; 0x07
 57e:	e0 2d       	mov	r30, r0
 580:	82 81       	ldd	r24, Z+2	; 0x02
 582:	93 81       	ldd	r25, Z+3	; 0x03
 584:	90 93 f0 06 	sts	0x06F0, r25	; 0x8006f0 <xNextTaskUnblockTime+0x1>
 588:	80 93 ef 06 	sts	0x06EF, r24	; 0x8006ef <xNextTaskUnblockTime>
 58c:	08 95       	ret

0000058e <prvAddCurrentTaskToDelayedList>:
 58e:	ff 92       	push	r15
 590:	0f 93       	push	r16
 592:	1f 93       	push	r17
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	ec 01       	movw	r28, r24
 59a:	f6 2e       	mov	r15, r22
 59c:	00 91 f7 06 	lds	r16, 0x06F7	; 0x8006f7 <xTickCount>
 5a0:	10 91 f8 06 	lds	r17, 0x06F8	; 0x8006f8 <xTickCount+0x1>
 5a4:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <pxCurrentTCB>
 5a8:	90 91 51 07 	lds	r25, 0x0751	; 0x800751 <pxCurrentTCB+0x1>
 5ac:	02 96       	adiw	r24, 0x02	; 2
 5ae:	24 de       	rcall	.-952    	; 0x1f8 <uxListRemove>
 5b0:	cf 3f       	cpi	r28, 0xFF	; 255
 5b2:	8f ef       	ldi	r24, 0xFF	; 255
 5b4:	d8 07       	cpc	r29, r24
 5b6:	61 f4       	brne	.+24     	; 0x5d0 <prvAddCurrentTaskToDelayedList+0x42>
 5b8:	ff 20       	and	r15, r15
 5ba:	51 f0       	breq	.+20     	; 0x5d0 <prvAddCurrentTaskToDelayedList+0x42>
 5bc:	60 91 50 07 	lds	r22, 0x0750	; 0x800750 <pxCurrentTCB>
 5c0:	70 91 51 07 	lds	r23, 0x0751	; 0x800751 <pxCurrentTCB+0x1>
 5c4:	6e 5f       	subi	r22, 0xFE	; 254
 5c6:	7f 4f       	sbci	r23, 0xFF	; 255
 5c8:	8a ef       	ldi	r24, 0xFA	; 250
 5ca:	96 e0       	ldi	r25, 0x06	; 6
 5cc:	c3 dd       	rcall	.-1146   	; 0x154 <vListInsertEnd>
 5ce:	2d c0       	rjmp	.+90     	; 0x62a <prvAddCurrentTaskToDelayedList+0x9c>
 5d0:	c0 0f       	add	r28, r16
 5d2:	d1 1f       	adc	r29, r17
 5d4:	e0 91 50 07 	lds	r30, 0x0750	; 0x800750 <pxCurrentTCB>
 5d8:	f0 91 51 07 	lds	r31, 0x0751	; 0x800751 <pxCurrentTCB+0x1>
 5dc:	d3 83       	std	Z+3, r29	; 0x03
 5de:	c2 83       	std	Z+2, r28	; 0x02
 5e0:	c0 17       	cp	r28, r16
 5e2:	d1 07       	cpc	r29, r17
 5e4:	60 f4       	brcc	.+24     	; 0x5fe <prvAddCurrentTaskToDelayedList+0x70>
 5e6:	60 91 50 07 	lds	r22, 0x0750	; 0x800750 <pxCurrentTCB>
 5ea:	70 91 51 07 	lds	r23, 0x0751	; 0x800751 <pxCurrentTCB+0x1>
 5ee:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <pxOverflowDelayedTaskList>
 5f2:	90 91 17 07 	lds	r25, 0x0717	; 0x800717 <pxOverflowDelayedTaskList+0x1>
 5f6:	6e 5f       	subi	r22, 0xFE	; 254
 5f8:	7f 4f       	sbci	r23, 0xFF	; 255
 5fa:	cd dd       	rcall	.-1126   	; 0x196 <vListInsert>
 5fc:	16 c0       	rjmp	.+44     	; 0x62a <prvAddCurrentTaskToDelayedList+0x9c>
 5fe:	60 91 50 07 	lds	r22, 0x0750	; 0x800750 <pxCurrentTCB>
 602:	70 91 51 07 	lds	r23, 0x0751	; 0x800751 <pxCurrentTCB+0x1>
 606:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <pxDelayedTaskList>
 60a:	90 91 19 07 	lds	r25, 0x0719	; 0x800719 <pxDelayedTaskList+0x1>
 60e:	6e 5f       	subi	r22, 0xFE	; 254
 610:	7f 4f       	sbci	r23, 0xFF	; 255
 612:	c1 dd       	rcall	.-1150   	; 0x196 <vListInsert>
 614:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <xNextTaskUnblockTime>
 618:	90 91 f0 06 	lds	r25, 0x06F0	; 0x8006f0 <xNextTaskUnblockTime+0x1>
 61c:	c8 17       	cp	r28, r24
 61e:	d9 07       	cpc	r29, r25
 620:	20 f4       	brcc	.+8      	; 0x62a <prvAddCurrentTaskToDelayedList+0x9c>
 622:	d0 93 f0 06 	sts	0x06F0, r29	; 0x8006f0 <xNextTaskUnblockTime+0x1>
 626:	c0 93 ef 06 	sts	0x06EF, r28	; 0x8006ef <xNextTaskUnblockTime>
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	1f 91       	pop	r17
 630:	0f 91       	pop	r16
 632:	ff 90       	pop	r15
 634:	08 95       	ret

00000636 <xTaskCreate>:
 636:	4f 92       	push	r4
 638:	5f 92       	push	r5
 63a:	6f 92       	push	r6
 63c:	7f 92       	push	r7
 63e:	8f 92       	push	r8
 640:	9f 92       	push	r9
 642:	af 92       	push	r10
 644:	bf 92       	push	r11
 646:	cf 92       	push	r12
 648:	df 92       	push	r13
 64a:	ef 92       	push	r14
 64c:	ff 92       	push	r15
 64e:	0f 93       	push	r16
 650:	cf 93       	push	r28
 652:	df 93       	push	r29
 654:	4c 01       	movw	r8, r24
 656:	6b 01       	movw	r12, r22
 658:	5a 01       	movw	r10, r20
 65a:	29 01       	movw	r4, r18
 65c:	ca 01       	movw	r24, r20
 65e:	34 dd       	rcall	.-1432   	; 0xc8 <pvPortMalloc>
 660:	3c 01       	movw	r6, r24
 662:	89 2b       	or	r24, r25
 664:	09 f4       	brne	.+2      	; 0x668 <xTaskCreate+0x32>
 666:	d2 c0       	rjmp	.+420    	; 0x80c <xTaskCreate+0x1d6>
 668:	86 e2       	ldi	r24, 0x26	; 38
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	2d dd       	rcall	.-1446   	; 0xc8 <pvPortMalloc>
 66e:	ec 01       	movw	r28, r24
 670:	89 2b       	or	r24, r25
 672:	71 f0       	breq	.+28     	; 0x690 <xTaskCreate+0x5a>
 674:	78 8e       	std	Y+24, r7	; 0x18
 676:	6f 8a       	std	Y+23, r6	; 0x17
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	a8 1a       	sub	r10, r24
 67c:	b1 08       	sbc	r11, r1
 67e:	6a 0c       	add	r6, r10
 680:	7b 1c       	adc	r7, r11
 682:	d6 01       	movw	r26, r12
 684:	8c 91       	ld	r24, X
 686:	89 8f       	std	Y+25, r24	; 0x19
 688:	8c 91       	ld	r24, X
 68a:	81 11       	cpse	r24, r1
 68c:	04 c0       	rjmp	.+8      	; 0x696 <xTaskCreate+0x60>
 68e:	17 c0       	rjmp	.+46     	; 0x6be <xTaskCreate+0x88>
 690:	c3 01       	movw	r24, r6
 692:	4d dd       	rcall	.-1382   	; 0x12e <vPortFree>
 694:	bb c0       	rjmp	.+374    	; 0x80c <xTaskCreate+0x1d6>
 696:	ae 01       	movw	r20, r28
 698:	46 5e       	subi	r20, 0xE6	; 230
 69a:	5f 4f       	sbci	r21, 0xFF	; 255
 69c:	f6 01       	movw	r30, r12
 69e:	31 96       	adiw	r30, 0x01	; 1
 6a0:	b8 e0       	ldi	r27, 0x08	; 8
 6a2:	cb 0e       	add	r12, r27
 6a4:	d1 1c       	adc	r13, r1
 6a6:	cf 01       	movw	r24, r30
 6a8:	21 91       	ld	r18, Z+
 6aa:	da 01       	movw	r26, r20
 6ac:	2d 93       	st	X+, r18
 6ae:	ad 01       	movw	r20, r26
 6b0:	dc 01       	movw	r26, r24
 6b2:	8c 91       	ld	r24, X
 6b4:	88 23       	and	r24, r24
 6b6:	19 f0       	breq	.+6      	; 0x6be <xTaskCreate+0x88>
 6b8:	ec 15       	cp	r30, r12
 6ba:	fd 05       	cpc	r31, r13
 6bc:	a1 f7       	brne	.-24     	; 0x6a6 <xTaskCreate+0x70>
 6be:	18 a2       	std	Y+32, r1	; 0x20
 6c0:	04 30       	cpi	r16, 0x04	; 4
 6c2:	08 f0       	brcs	.+2      	; 0x6c6 <xTaskCreate+0x90>
 6c4:	03 e0       	ldi	r16, 0x03	; 3
 6c6:	0e 8b       	std	Y+22, r16	; 0x16
 6c8:	6e 01       	movw	r12, r28
 6ca:	b2 e0       	ldi	r27, 0x02	; 2
 6cc:	cb 0e       	add	r12, r27
 6ce:	d1 1c       	adc	r13, r1
 6d0:	c6 01       	movw	r24, r12
 6d2:	3c dd       	rcall	.-1416   	; 0x14c <vListInitialiseItem>
 6d4:	ce 01       	movw	r24, r28
 6d6:	0c 96       	adiw	r24, 0x0c	; 12
 6d8:	39 dd       	rcall	.-1422   	; 0x14c <vListInitialiseItem>
 6da:	d9 87       	std	Y+9, r29	; 0x09
 6dc:	c8 87       	std	Y+8, r28	; 0x08
 6de:	84 e0       	ldi	r24, 0x04	; 4
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	80 1b       	sub	r24, r16
 6e4:	91 09       	sbc	r25, r1
 6e6:	9d 87       	std	Y+13, r25	; 0x0d
 6e8:	8c 87       	std	Y+12, r24	; 0x0c
 6ea:	db 8b       	std	Y+19, r29	; 0x13
 6ec:	ca 8b       	std	Y+18, r28	; 0x12
 6ee:	19 a2       	std	Y+33, r1	; 0x21
 6f0:	1a a2       	std	Y+34, r1	; 0x22
 6f2:	1b a2       	std	Y+35, r1	; 0x23
 6f4:	1c a2       	std	Y+36, r1	; 0x24
 6f6:	1d a2       	std	Y+37, r1	; 0x25
 6f8:	a2 01       	movw	r20, r4
 6fa:	b4 01       	movw	r22, r8
 6fc:	c3 01       	movw	r24, r6
 6fe:	d3 dd       	rcall	.-1114   	; 0x2a6 <pxPortInitialiseStack>
 700:	99 83       	std	Y+1, r25	; 0x01
 702:	88 83       	st	Y, r24
 704:	e1 14       	cp	r14, r1
 706:	f1 04       	cpc	r15, r1
 708:	19 f0       	breq	.+6      	; 0x710 <xTaskCreate+0xda>
 70a:	f7 01       	movw	r30, r14
 70c:	d1 83       	std	Z+1, r29	; 0x01
 70e:	c0 83       	st	Z, r28
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	f8 94       	cli
 714:	0f 92       	push	r0
 716:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <uxCurrentNumberOfTasks>
 71a:	8f 5f       	subi	r24, 0xFF	; 255
 71c:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <uxCurrentNumberOfTasks>
 720:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <pxCurrentTCB>
 724:	90 91 51 07 	lds	r25, 0x0751	; 0x800751 <pxCurrentTCB+0x1>
 728:	89 2b       	or	r24, r25
 72a:	89 f5       	brne	.+98     	; 0x78e <xTaskCreate+0x158>
 72c:	d0 93 51 07 	sts	0x0751, r29	; 0x800751 <pxCurrentTCB+0x1>
 730:	c0 93 50 07 	sts	0x0750, r28	; 0x800750 <pxCurrentTCB>
 734:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <uxCurrentNumberOfTasks>
 738:	81 30       	cpi	r24, 0x01	; 1
 73a:	09 f0       	breq	.+2      	; 0x73e <xTaskCreate+0x108>
 73c:	38 c0       	rjmp	.+112    	; 0x7ae <xTaskCreate+0x178>
 73e:	8c e2       	ldi	r24, 0x2C	; 44
 740:	97 e0       	ldi	r25, 0x07	; 7
 742:	f6 dc       	rcall	.-1556   	; 0x130 <vListInitialise>
 744:	85 e3       	ldi	r24, 0x35	; 53
 746:	97 e0       	ldi	r25, 0x07	; 7
 748:	f3 dc       	rcall	.-1562   	; 0x130 <vListInitialise>
 74a:	8e e3       	ldi	r24, 0x3E	; 62
 74c:	97 e0       	ldi	r25, 0x07	; 7
 74e:	f0 dc       	rcall	.-1568   	; 0x130 <vListInitialise>
 750:	87 e4       	ldi	r24, 0x47	; 71
 752:	97 e0       	ldi	r25, 0x07	; 7
 754:	ed dc       	rcall	.-1574   	; 0x130 <vListInitialise>
 756:	83 e2       	ldi	r24, 0x23	; 35
 758:	97 e0       	ldi	r25, 0x07	; 7
 75a:	ea dc       	rcall	.-1580   	; 0x130 <vListInitialise>
 75c:	8a e1       	ldi	r24, 0x1A	; 26
 75e:	97 e0       	ldi	r25, 0x07	; 7
 760:	e7 dc       	rcall	.-1586   	; 0x130 <vListInitialise>
 762:	8d e0       	ldi	r24, 0x0D	; 13
 764:	97 e0       	ldi	r25, 0x07	; 7
 766:	e4 dc       	rcall	.-1592   	; 0x130 <vListInitialise>
 768:	84 e0       	ldi	r24, 0x04	; 4
 76a:	97 e0       	ldi	r25, 0x07	; 7
 76c:	e1 dc       	rcall	.-1598   	; 0x130 <vListInitialise>
 76e:	8a ef       	ldi	r24, 0xFA	; 250
 770:	96 e0       	ldi	r25, 0x06	; 6
 772:	de dc       	rcall	.-1604   	; 0x130 <vListInitialise>
 774:	83 e2       	ldi	r24, 0x23	; 35
 776:	97 e0       	ldi	r25, 0x07	; 7
 778:	90 93 19 07 	sts	0x0719, r25	; 0x800719 <pxDelayedTaskList+0x1>
 77c:	80 93 18 07 	sts	0x0718, r24	; 0x800718 <pxDelayedTaskList>
 780:	8a e1       	ldi	r24, 0x1A	; 26
 782:	97 e0       	ldi	r25, 0x07	; 7
 784:	90 93 17 07 	sts	0x0717, r25	; 0x800717 <pxOverflowDelayedTaskList+0x1>
 788:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <pxOverflowDelayedTaskList>
 78c:	10 c0       	rjmp	.+32     	; 0x7ae <xTaskCreate+0x178>
 78e:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <xSchedulerRunning>
 792:	81 11       	cpse	r24, r1
 794:	0c c0       	rjmp	.+24     	; 0x7ae <xTaskCreate+0x178>
 796:	e0 91 50 07 	lds	r30, 0x0750	; 0x800750 <pxCurrentTCB>
 79a:	f0 91 51 07 	lds	r31, 0x0751	; 0x800751 <pxCurrentTCB+0x1>
 79e:	96 89       	ldd	r25, Z+22	; 0x16
 7a0:	8e 89       	ldd	r24, Y+22	; 0x16
 7a2:	89 17       	cp	r24, r25
 7a4:	20 f0       	brcs	.+8      	; 0x7ae <xTaskCreate+0x178>
 7a6:	d0 93 51 07 	sts	0x0751, r29	; 0x800751 <pxCurrentTCB+0x1>
 7aa:	c0 93 50 07 	sts	0x0750, r28	; 0x800750 <pxCurrentTCB>
 7ae:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <uxTaskNumber>
 7b2:	8f 5f       	subi	r24, 0xFF	; 255
 7b4:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <uxTaskNumber>
 7b8:	8e 89       	ldd	r24, Y+22	; 0x16
 7ba:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <uxTopReadyPriority>
 7be:	98 17       	cp	r25, r24
 7c0:	10 f4       	brcc	.+4      	; 0x7c6 <xTaskCreate+0x190>
 7c2:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <uxTopReadyPriority>
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	9c 01       	movw	r18, r24
 7ca:	22 0f       	add	r18, r18
 7cc:	33 1f       	adc	r19, r19
 7ce:	22 0f       	add	r18, r18
 7d0:	33 1f       	adc	r19, r19
 7d2:	22 0f       	add	r18, r18
 7d4:	33 1f       	adc	r19, r19
 7d6:	82 0f       	add	r24, r18
 7d8:	93 1f       	adc	r25, r19
 7da:	b6 01       	movw	r22, r12
 7dc:	84 5d       	subi	r24, 0xD4	; 212
 7de:	98 4f       	sbci	r25, 0xF8	; 248
 7e0:	b9 dc       	rcall	.-1678   	; 0x154 <vListInsertEnd>
 7e2:	0f 90       	pop	r0
 7e4:	0f be       	out	0x3f, r0	; 63
 7e6:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <xSchedulerRunning>
 7ea:	88 23       	and	r24, r24
 7ec:	59 f0       	breq	.+22     	; 0x804 <xTaskCreate+0x1ce>
 7ee:	e0 91 50 07 	lds	r30, 0x0750	; 0x800750 <pxCurrentTCB>
 7f2:	f0 91 51 07 	lds	r31, 0x0751	; 0x800751 <pxCurrentTCB+0x1>
 7f6:	96 89       	ldd	r25, Z+22	; 0x16
 7f8:	8e 89       	ldd	r24, Y+22	; 0x16
 7fa:	98 17       	cp	r25, r24
 7fc:	28 f4       	brcc	.+10     	; 0x808 <xTaskCreate+0x1d2>
 7fe:	f4 dd       	rcall	.-1048   	; 0x3e8 <vPortYield>
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	05 c0       	rjmp	.+10     	; 0x80e <xTaskCreate+0x1d8>
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	03 c0       	rjmp	.+6      	; 0x80e <xTaskCreate+0x1d8>
 808:	81 e0       	ldi	r24, 0x01	; 1
 80a:	01 c0       	rjmp	.+2      	; 0x80e <xTaskCreate+0x1d8>
 80c:	8f ef       	ldi	r24, 0xFF	; 255
 80e:	df 91       	pop	r29
 810:	cf 91       	pop	r28
 812:	0f 91       	pop	r16
 814:	ff 90       	pop	r15
 816:	ef 90       	pop	r14
 818:	df 90       	pop	r13
 81a:	cf 90       	pop	r12
 81c:	bf 90       	pop	r11
 81e:	af 90       	pop	r10
 820:	9f 90       	pop	r9
 822:	8f 90       	pop	r8
 824:	7f 90       	pop	r7
 826:	6f 90       	pop	r6
 828:	5f 90       	pop	r5
 82a:	4f 90       	pop	r4
 82c:	08 95       	ret

0000082e <vTaskStartScheduler>:
 82e:	ef 92       	push	r14
 830:	ff 92       	push	r15
 832:	0f 93       	push	r16
 834:	0f 2e       	mov	r0, r31
 836:	fd ee       	ldi	r31, 0xED	; 237
 838:	ef 2e       	mov	r14, r31
 83a:	f6 e0       	ldi	r31, 0x06	; 6
 83c:	ff 2e       	mov	r15, r31
 83e:	f0 2d       	mov	r31, r0
 840:	00 e0       	ldi	r16, 0x00	; 0
 842:	20 e0       	ldi	r18, 0x00	; 0
 844:	30 e0       	ldi	r19, 0x00	; 0
 846:	45 e5       	ldi	r20, 0x55	; 85
 848:	50 e0       	ldi	r21, 0x00	; 0
 84a:	66 e0       	ldi	r22, 0x06	; 6
 84c:	71 e0       	ldi	r23, 0x01	; 1
 84e:	8b eb       	ldi	r24, 0xBB	; 187
 850:	95 e0       	ldi	r25, 0x05	; 5
 852:	f1 de       	rcall	.-542    	; 0x636 <xTaskCreate>
 854:	81 30       	cpi	r24, 0x01	; 1
 856:	79 f4       	brne	.+30     	; 0x876 <vTaskStartScheduler+0x48>
 858:	f8 94       	cli
 85a:	8f ef       	ldi	r24, 0xFF	; 255
 85c:	9f ef       	ldi	r25, 0xFF	; 255
 85e:	90 93 f0 06 	sts	0x06F0, r25	; 0x8006f0 <xNextTaskUnblockTime+0x1>
 862:	80 93 ef 06 	sts	0x06EF, r24	; 0x8006ef <xNextTaskUnblockTime>
 866:	81 e0       	ldi	r24, 0x01	; 1
 868:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <xSchedulerRunning>
 86c:	10 92 f8 06 	sts	0x06F8, r1	; 0x8006f8 <xTickCount+0x1>
 870:	10 92 f7 06 	sts	0x06F7, r1	; 0x8006f7 <xTickCount>
 874:	84 dd       	rcall	.-1272   	; 0x37e <xPortStartScheduler>
 876:	0f 91       	pop	r16
 878:	ff 90       	pop	r15
 87a:	ef 90       	pop	r14
 87c:	08 95       	ret

0000087e <vTaskSuspendAll>:
 87e:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <uxSchedulerSuspended>
 882:	8f 5f       	subi	r24, 0xFF	; 255
 884:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <uxSchedulerSuspended>
 888:	08 95       	ret

0000088a <xTaskGetTickCount>:
 88a:	0f b6       	in	r0, 0x3f	; 63
 88c:	f8 94       	cli
 88e:	0f 92       	push	r0
 890:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <xTickCount>
 894:	90 91 f8 06 	lds	r25, 0x06F8	; 0x8006f8 <xTickCount+0x1>
 898:	0f 90       	pop	r0
 89a:	0f be       	out	0x3f, r0	; 63
 89c:	08 95       	ret

0000089e <xTaskIncrementTick>:
 89e:	cf 92       	push	r12
 8a0:	df 92       	push	r13
 8a2:	ef 92       	push	r14
 8a4:	ff 92       	push	r15
 8a6:	0f 93       	push	r16
 8a8:	1f 93       	push	r17
 8aa:	cf 93       	push	r28
 8ac:	df 93       	push	r29
 8ae:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <uxSchedulerSuspended>
 8b2:	81 11       	cpse	r24, r1
 8b4:	95 c0       	rjmp	.+298    	; 0x9e0 <xTaskIncrementTick+0x142>
 8b6:	e0 90 f7 06 	lds	r14, 0x06F7	; 0x8006f7 <xTickCount>
 8ba:	f0 90 f8 06 	lds	r15, 0x06F8	; 0x8006f8 <xTickCount+0x1>
 8be:	8f ef       	ldi	r24, 0xFF	; 255
 8c0:	e8 1a       	sub	r14, r24
 8c2:	f8 0a       	sbc	r15, r24
 8c4:	f0 92 f8 06 	sts	0x06F8, r15	; 0x8006f8 <xTickCount+0x1>
 8c8:	e0 92 f7 06 	sts	0x06F7, r14	; 0x8006f7 <xTickCount>
 8cc:	e1 14       	cp	r14, r1
 8ce:	f1 04       	cpc	r15, r1
 8d0:	b1 f4       	brne	.+44     	; 0x8fe <xTaskIncrementTick+0x60>
 8d2:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <pxDelayedTaskList>
 8d6:	90 91 19 07 	lds	r25, 0x0719	; 0x800719 <pxDelayedTaskList+0x1>
 8da:	20 91 16 07 	lds	r18, 0x0716	; 0x800716 <pxOverflowDelayedTaskList>
 8de:	30 91 17 07 	lds	r19, 0x0717	; 0x800717 <pxOverflowDelayedTaskList+0x1>
 8e2:	30 93 19 07 	sts	0x0719, r19	; 0x800719 <pxDelayedTaskList+0x1>
 8e6:	20 93 18 07 	sts	0x0718, r18	; 0x800718 <pxDelayedTaskList>
 8ea:	90 93 17 07 	sts	0x0717, r25	; 0x800717 <pxOverflowDelayedTaskList+0x1>
 8ee:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <pxOverflowDelayedTaskList>
 8f2:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <xNumOfOverflows>
 8f6:	8f 5f       	subi	r24, 0xFF	; 255
 8f8:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <xNumOfOverflows>
 8fc:	29 de       	rcall	.-942    	; 0x550 <prvResetNextTaskUnblockTime>
 8fe:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <xNextTaskUnblockTime>
 902:	90 91 f0 06 	lds	r25, 0x06F0	; 0x8006f0 <xNextTaskUnblockTime+0x1>
 906:	e8 16       	cp	r14, r24
 908:	f9 06       	cpc	r15, r25
 90a:	10 f4       	brcc	.+4      	; 0x910 <xTaskIncrementTick+0x72>
 90c:	d1 2c       	mov	r13, r1
 90e:	50 c0       	rjmp	.+160    	; 0x9b0 <xTaskIncrementTick+0x112>
 910:	d1 2c       	mov	r13, r1
 912:	cc 24       	eor	r12, r12
 914:	c3 94       	inc	r12
 916:	e0 91 18 07 	lds	r30, 0x0718	; 0x800718 <pxDelayedTaskList>
 91a:	f0 91 19 07 	lds	r31, 0x0719	; 0x800719 <pxDelayedTaskList+0x1>
 91e:	90 81       	ld	r25, Z
 920:	91 11       	cpse	r25, r1
 922:	07 c0       	rjmp	.+14     	; 0x932 <xTaskIncrementTick+0x94>
 924:	8f ef       	ldi	r24, 0xFF	; 255
 926:	9f ef       	ldi	r25, 0xFF	; 255
 928:	90 93 f0 06 	sts	0x06F0, r25	; 0x8006f0 <xNextTaskUnblockTime+0x1>
 92c:	80 93 ef 06 	sts	0x06EF, r24	; 0x8006ef <xNextTaskUnblockTime>
 930:	3f c0       	rjmp	.+126    	; 0x9b0 <xTaskIncrementTick+0x112>
 932:	e0 91 18 07 	lds	r30, 0x0718	; 0x800718 <pxDelayedTaskList>
 936:	f0 91 19 07 	lds	r31, 0x0719	; 0x800719 <pxDelayedTaskList+0x1>
 93a:	05 80       	ldd	r0, Z+5	; 0x05
 93c:	f6 81       	ldd	r31, Z+6	; 0x06
 93e:	e0 2d       	mov	r30, r0
 940:	c6 81       	ldd	r28, Z+6	; 0x06
 942:	d7 81       	ldd	r29, Z+7	; 0x07
 944:	2a 81       	ldd	r18, Y+2	; 0x02
 946:	3b 81       	ldd	r19, Y+3	; 0x03
 948:	e2 16       	cp	r14, r18
 94a:	f3 06       	cpc	r15, r19
 94c:	28 f4       	brcc	.+10     	; 0x958 <xTaskIncrementTick+0xba>
 94e:	30 93 f0 06 	sts	0x06F0, r19	; 0x8006f0 <xNextTaskUnblockTime+0x1>
 952:	20 93 ef 06 	sts	0x06EF, r18	; 0x8006ef <xNextTaskUnblockTime>
 956:	2c c0       	rjmp	.+88     	; 0x9b0 <xTaskIncrementTick+0x112>
 958:	8e 01       	movw	r16, r28
 95a:	0e 5f       	subi	r16, 0xFE	; 254
 95c:	1f 4f       	sbci	r17, 0xFF	; 255
 95e:	c8 01       	movw	r24, r16
 960:	4b dc       	rcall	.-1898   	; 0x1f8 <uxListRemove>
 962:	8c 89       	ldd	r24, Y+20	; 0x14
 964:	9d 89       	ldd	r25, Y+21	; 0x15
 966:	89 2b       	or	r24, r25
 968:	19 f0       	breq	.+6      	; 0x970 <xTaskIncrementTick+0xd2>
 96a:	ce 01       	movw	r24, r28
 96c:	0c 96       	adiw	r24, 0x0c	; 12
 96e:	44 dc       	rcall	.-1912   	; 0x1f8 <uxListRemove>
 970:	2e 89       	ldd	r18, Y+22	; 0x16
 972:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxTopReadyPriority>
 976:	82 17       	cp	r24, r18
 978:	10 f4       	brcc	.+4      	; 0x97e <xTaskIncrementTick+0xe0>
 97a:	20 93 f6 06 	sts	0x06F6, r18	; 0x8006f6 <uxTopReadyPriority>
 97e:	30 e0       	ldi	r19, 0x00	; 0
 980:	c9 01       	movw	r24, r18
 982:	88 0f       	add	r24, r24
 984:	99 1f       	adc	r25, r25
 986:	88 0f       	add	r24, r24
 988:	99 1f       	adc	r25, r25
 98a:	88 0f       	add	r24, r24
 98c:	99 1f       	adc	r25, r25
 98e:	82 0f       	add	r24, r18
 990:	93 1f       	adc	r25, r19
 992:	b8 01       	movw	r22, r16
 994:	84 5d       	subi	r24, 0xD4	; 212
 996:	98 4f       	sbci	r25, 0xF8	; 248
 998:	dd db       	rcall	.-2118   	; 0x154 <vListInsertEnd>
 99a:	e0 91 50 07 	lds	r30, 0x0750	; 0x800750 <pxCurrentTCB>
 99e:	f0 91 51 07 	lds	r31, 0x0751	; 0x800751 <pxCurrentTCB+0x1>
 9a2:	9e 89       	ldd	r25, Y+22	; 0x16
 9a4:	86 89       	ldd	r24, Z+22	; 0x16
 9a6:	98 17       	cp	r25, r24
 9a8:	08 f4       	brcc	.+2      	; 0x9ac <xTaskIncrementTick+0x10e>
 9aa:	b5 cf       	rjmp	.-150    	; 0x916 <xTaskIncrementTick+0x78>
 9ac:	dc 2c       	mov	r13, r12
 9ae:	b3 cf       	rjmp	.-154    	; 0x916 <xTaskIncrementTick+0x78>
 9b0:	e0 91 50 07 	lds	r30, 0x0750	; 0x800750 <pxCurrentTCB>
 9b4:	f0 91 51 07 	lds	r31, 0x0751	; 0x800751 <pxCurrentTCB+0x1>
 9b8:	86 89       	ldd	r24, Z+22	; 0x16
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	fc 01       	movw	r30, r24
 9be:	ee 0f       	add	r30, r30
 9c0:	ff 1f       	adc	r31, r31
 9c2:	ee 0f       	add	r30, r30
 9c4:	ff 1f       	adc	r31, r31
 9c6:	ee 0f       	add	r30, r30
 9c8:	ff 1f       	adc	r31, r31
 9ca:	8e 0f       	add	r24, r30
 9cc:	9f 1f       	adc	r25, r31
 9ce:	fc 01       	movw	r30, r24
 9d0:	e4 5d       	subi	r30, 0xD4	; 212
 9d2:	f8 4f       	sbci	r31, 0xF8	; 248
 9d4:	80 81       	ld	r24, Z
 9d6:	82 30       	cpi	r24, 0x02	; 2
 9d8:	48 f0       	brcs	.+18     	; 0x9ec <xTaskIncrementTick+0x14e>
 9da:	dd 24       	eor	r13, r13
 9dc:	d3 94       	inc	r13
 9de:	06 c0       	rjmp	.+12     	; 0x9ec <xTaskIncrementTick+0x14e>
 9e0:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <uxPendedTicks>
 9e4:	8f 5f       	subi	r24, 0xFF	; 255
 9e6:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <uxPendedTicks>
 9ea:	d1 2c       	mov	r13, r1
 9ec:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <xYieldPending>
 9f0:	88 23       	and	r24, r24
 9f2:	11 f0       	breq	.+4      	; 0x9f8 <xTaskIncrementTick+0x15a>
 9f4:	dd 24       	eor	r13, r13
 9f6:	d3 94       	inc	r13
 9f8:	8d 2d       	mov	r24, r13
 9fa:	df 91       	pop	r29
 9fc:	cf 91       	pop	r28
 9fe:	1f 91       	pop	r17
 a00:	0f 91       	pop	r16
 a02:	ff 90       	pop	r15
 a04:	ef 90       	pop	r14
 a06:	df 90       	pop	r13
 a08:	cf 90       	pop	r12
 a0a:	08 95       	ret

00000a0c <xTaskResumeAll>:
 a0c:	df 92       	push	r13
 a0e:	ef 92       	push	r14
 a10:	ff 92       	push	r15
 a12:	0f 93       	push	r16
 a14:	1f 93       	push	r17
 a16:	cf 93       	push	r28
 a18:	df 93       	push	r29
 a1a:	0f b6       	in	r0, 0x3f	; 63
 a1c:	f8 94       	cli
 a1e:	0f 92       	push	r0
 a20:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <uxSchedulerSuspended>
 a24:	81 50       	subi	r24, 0x01	; 1
 a26:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <uxSchedulerSuspended>
 a2a:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <uxSchedulerSuspended>
 a2e:	81 11       	cpse	r24, r1
 a30:	59 c0       	rjmp	.+178    	; 0xae4 <xTaskResumeAll+0xd8>
 a32:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <uxCurrentNumberOfTasks>
 a36:	81 11       	cpse	r24, r1
 a38:	30 c0       	rjmp	.+96     	; 0xa9a <xTaskResumeAll+0x8e>
 a3a:	57 c0       	rjmp	.+174    	; 0xaea <xTaskResumeAll+0xde>
 a3c:	d7 01       	movw	r26, r14
 a3e:	15 96       	adiw	r26, 0x05	; 5
 a40:	ed 91       	ld	r30, X+
 a42:	fc 91       	ld	r31, X
 a44:	16 97       	sbiw	r26, 0x06	; 6
 a46:	c6 81       	ldd	r28, Z+6	; 0x06
 a48:	d7 81       	ldd	r29, Z+7	; 0x07
 a4a:	ce 01       	movw	r24, r28
 a4c:	0c 96       	adiw	r24, 0x0c	; 12
 a4e:	d4 db       	rcall	.-2136   	; 0x1f8 <uxListRemove>
 a50:	8e 01       	movw	r16, r28
 a52:	0e 5f       	subi	r16, 0xFE	; 254
 a54:	1f 4f       	sbci	r17, 0xFF	; 255
 a56:	c8 01       	movw	r24, r16
 a58:	cf db       	rcall	.-2146   	; 0x1f8 <uxListRemove>
 a5a:	2e 89       	ldd	r18, Y+22	; 0x16
 a5c:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxTopReadyPriority>
 a60:	82 17       	cp	r24, r18
 a62:	10 f4       	brcc	.+4      	; 0xa68 <xTaskResumeAll+0x5c>
 a64:	20 93 f6 06 	sts	0x06F6, r18	; 0x8006f6 <uxTopReadyPriority>
 a68:	30 e0       	ldi	r19, 0x00	; 0
 a6a:	c9 01       	movw	r24, r18
 a6c:	88 0f       	add	r24, r24
 a6e:	99 1f       	adc	r25, r25
 a70:	88 0f       	add	r24, r24
 a72:	99 1f       	adc	r25, r25
 a74:	88 0f       	add	r24, r24
 a76:	99 1f       	adc	r25, r25
 a78:	82 0f       	add	r24, r18
 a7a:	93 1f       	adc	r25, r19
 a7c:	b8 01       	movw	r22, r16
 a7e:	84 5d       	subi	r24, 0xD4	; 212
 a80:	98 4f       	sbci	r25, 0xF8	; 248
 a82:	68 db       	rcall	.-2352   	; 0x154 <vListInsertEnd>
 a84:	e0 91 50 07 	lds	r30, 0x0750	; 0x800750 <pxCurrentTCB>
 a88:	f0 91 51 07 	lds	r31, 0x0751	; 0x800751 <pxCurrentTCB+0x1>
 a8c:	9e 89       	ldd	r25, Y+22	; 0x16
 a8e:	86 89       	ldd	r24, Z+22	; 0x16
 a90:	98 17       	cp	r25, r24
 a92:	68 f0       	brcs	.+26     	; 0xaae <xTaskResumeAll+0xa2>
 a94:	d0 92 f3 06 	sts	0x06F3, r13	; 0x8006f3 <xYieldPending>
 a98:	0a c0       	rjmp	.+20     	; 0xaae <xTaskResumeAll+0xa2>
 a9a:	c0 e0       	ldi	r28, 0x00	; 0
 a9c:	d0 e0       	ldi	r29, 0x00	; 0
 a9e:	0f 2e       	mov	r0, r31
 aa0:	fd e0       	ldi	r31, 0x0D	; 13
 aa2:	ef 2e       	mov	r14, r31
 aa4:	f7 e0       	ldi	r31, 0x07	; 7
 aa6:	ff 2e       	mov	r15, r31
 aa8:	f0 2d       	mov	r31, r0
 aaa:	dd 24       	eor	r13, r13
 aac:	d3 94       	inc	r13
 aae:	f7 01       	movw	r30, r14
 ab0:	80 81       	ld	r24, Z
 ab2:	81 11       	cpse	r24, r1
 ab4:	c3 cf       	rjmp	.-122    	; 0xa3c <xTaskResumeAll+0x30>
 ab6:	cd 2b       	or	r28, r29
 ab8:	09 f0       	breq	.+2      	; 0xabc <xTaskResumeAll+0xb0>
 aba:	4a dd       	rcall	.-1388   	; 0x550 <prvResetNextTaskUnblockTime>
 abc:	c0 91 f4 06 	lds	r28, 0x06F4	; 0x8006f4 <uxPendedTicks>
 ac0:	cc 23       	and	r28, r28
 ac2:	49 f0       	breq	.+18     	; 0xad6 <xTaskResumeAll+0xca>
 ac4:	d1 e0       	ldi	r29, 0x01	; 1
 ac6:	eb de       	rcall	.-554    	; 0x89e <xTaskIncrementTick>
 ac8:	81 11       	cpse	r24, r1
 aca:	d0 93 f3 06 	sts	0x06F3, r29	; 0x8006f3 <xYieldPending>
 ace:	c1 50       	subi	r28, 0x01	; 1
 ad0:	d1 f7       	brne	.-12     	; 0xac6 <xTaskResumeAll+0xba>
 ad2:	10 92 f4 06 	sts	0x06F4, r1	; 0x8006f4 <uxPendedTicks>
 ad6:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <xYieldPending>
 ada:	88 23       	and	r24, r24
 adc:	29 f0       	breq	.+10     	; 0xae8 <xTaskResumeAll+0xdc>
 ade:	84 dc       	rcall	.-1784   	; 0x3e8 <vPortYield>
 ae0:	81 e0       	ldi	r24, 0x01	; 1
 ae2:	03 c0       	rjmp	.+6      	; 0xaea <xTaskResumeAll+0xde>
 ae4:	80 e0       	ldi	r24, 0x00	; 0
 ae6:	01 c0       	rjmp	.+2      	; 0xaea <xTaskResumeAll+0xde>
 ae8:	80 e0       	ldi	r24, 0x00	; 0
 aea:	0f 90       	pop	r0
 aec:	0f be       	out	0x3f, r0	; 63
 aee:	df 91       	pop	r29
 af0:	cf 91       	pop	r28
 af2:	1f 91       	pop	r17
 af4:	0f 91       	pop	r16
 af6:	ff 90       	pop	r15
 af8:	ef 90       	pop	r14
 afa:	df 90       	pop	r13
 afc:	08 95       	ret

00000afe <vTaskDelayUntil>:
 afe:	0f 93       	push	r16
 b00:	1f 93       	push	r17
 b02:	cf 93       	push	r28
 b04:	df 93       	push	r29
 b06:	8c 01       	movw	r16, r24
 b08:	eb 01       	movw	r28, r22
 b0a:	b9 de       	rcall	.-654    	; 0x87e <vTaskSuspendAll>
 b0c:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <xTickCount>
 b10:	90 91 f8 06 	lds	r25, 0x06F8	; 0x8006f8 <xTickCount+0x1>
 b14:	f8 01       	movw	r30, r16
 b16:	40 81       	ld	r20, Z
 b18:	51 81       	ldd	r21, Z+1	; 0x01
 b1a:	9a 01       	movw	r18, r20
 b1c:	2c 0f       	add	r18, r28
 b1e:	3d 1f       	adc	r19, r29
 b20:	84 17       	cp	r24, r20
 b22:	95 07       	cpc	r25, r21
 b24:	48 f4       	brcc	.+18     	; 0xb38 <vTaskDelayUntil+0x3a>
 b26:	24 17       	cp	r18, r20
 b28:	35 07       	cpc	r19, r21
 b2a:	e0 f4       	brcc	.+56     	; 0xb64 <vTaskDelayUntil+0x66>
 b2c:	31 83       	std	Z+1, r19	; 0x01
 b2e:	20 83       	st	Z, r18
 b30:	82 17       	cp	r24, r18
 b32:	93 07       	cpc	r25, r19
 b34:	70 f4       	brcc	.+28     	; 0xb52 <vTaskDelayUntil+0x54>
 b36:	07 c0       	rjmp	.+14     	; 0xb46 <vTaskDelayUntil+0x48>
 b38:	24 17       	cp	r18, r20
 b3a:	35 07       	cpc	r19, r21
 b3c:	78 f0       	brcs	.+30     	; 0xb5c <vTaskDelayUntil+0x5e>
 b3e:	82 17       	cp	r24, r18
 b40:	93 07       	cpc	r25, r19
 b42:	60 f0       	brcs	.+24     	; 0xb5c <vTaskDelayUntil+0x5e>
 b44:	0f c0       	rjmp	.+30     	; 0xb64 <vTaskDelayUntil+0x66>
 b46:	60 e0       	ldi	r22, 0x00	; 0
 b48:	a9 01       	movw	r20, r18
 b4a:	48 1b       	sub	r20, r24
 b4c:	59 0b       	sbc	r21, r25
 b4e:	ca 01       	movw	r24, r20
 b50:	1e dd       	rcall	.-1476   	; 0x58e <prvAddCurrentTaskToDelayedList>
 b52:	5c df       	rcall	.-328    	; 0xa0c <xTaskResumeAll>
 b54:	81 11       	cpse	r24, r1
 b56:	0a c0       	rjmp	.+20     	; 0xb6c <vTaskDelayUntil+0x6e>
 b58:	47 dc       	rcall	.-1906   	; 0x3e8 <vPortYield>
 b5a:	08 c0       	rjmp	.+16     	; 0xb6c <vTaskDelayUntil+0x6e>
 b5c:	f8 01       	movw	r30, r16
 b5e:	31 83       	std	Z+1, r19	; 0x01
 b60:	20 83       	st	Z, r18
 b62:	f1 cf       	rjmp	.-30     	; 0xb46 <vTaskDelayUntil+0x48>
 b64:	f8 01       	movw	r30, r16
 b66:	31 83       	std	Z+1, r19	; 0x01
 b68:	20 83       	st	Z, r18
 b6a:	f3 cf       	rjmp	.-26     	; 0xb52 <vTaskDelayUntil+0x54>
 b6c:	df 91       	pop	r29
 b6e:	cf 91       	pop	r28
 b70:	1f 91       	pop	r17
 b72:	0f 91       	pop	r16
 b74:	08 95       	ret

00000b76 <prvIdleTask>:
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 b76:	04 e0       	ldi	r16, 0x04	; 4
 b78:	17 e0       	ldi	r17, 0x07	; 7

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 b7a:	0f 2e       	mov	r0, r31
 b7c:	fc e2       	ldi	r31, 0x2C	; 44
 b7e:	ef 2e       	mov	r14, r31
 b80:	f7 e0       	ldi	r31, 0x07	; 7
 b82:	ff 2e       	mov	r15, r31
 b84:	f0 2d       	mov	r31, r0
 b86:	24 c0       	rjmp	.+72     	; 0xbd0 <prvIdleTask+0x5a>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
 b88:	7a de       	rcall	.-780    	; 0x87e <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 b8a:	d8 01       	movw	r26, r16
 b8c:	cc 91       	ld	r28, X
			}
			( void ) xTaskResumeAll();
 b8e:	3e df       	rcall	.-388    	; 0xa0c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 b90:	cc 23       	and	r28, r28
 b92:	f1 f0       	breq	.+60     	; 0xbd0 <prvIdleTask+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 b94:	0f b6       	in	r0, 0x3f	; 63
 b96:	f8 94       	cli
 b98:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 b9a:	d8 01       	movw	r26, r16
 b9c:	15 96       	adiw	r26, 0x05	; 5
 b9e:	ed 91       	ld	r30, X+
 ba0:	fc 91       	ld	r31, X
 ba2:	16 97       	sbiw	r26, 0x06	; 6
 ba4:	c6 81       	ldd	r28, Z+6	; 0x06
 ba6:	d7 81       	ldd	r29, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 ba8:	ce 01       	movw	r24, r28
 baa:	02 96       	adiw	r24, 0x02	; 2
 bac:	25 db       	rcall	.-2486   	; 0x1f8 <uxListRemove>
					--uxCurrentNumberOfTasks;
 bae:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <uxCurrentNumberOfTasks>
 bb2:	81 50       	subi	r24, 0x01	; 1
 bb4:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <uxCurrentNumberOfTasks>
					--uxDeletedTasksWaitingCleanUp;
 bb8:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <uxDeletedTasksWaitingCleanUp>
 bbc:	81 50       	subi	r24, 0x01	; 1
 bbe:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <uxDeletedTasksWaitingCleanUp>
				}
				taskEXIT_CRITICAL();
 bc2:	0f 90       	pop	r0
 bc4:	0f be       	out	0x3f, r0	; 63

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 bc6:	8f 89       	ldd	r24, Y+23	; 0x17
 bc8:	98 8d       	ldd	r25, Y+24	; 0x18
 bca:	b1 da       	rcall	.-2718   	; 0x12e <vPortFree>
			vPortFree( pxTCB );
 bcc:	ce 01       	movw	r24, r28
 bce:	af da       	rcall	.-2722   	; 0x12e <vPortFree>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 bd0:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <uxDeletedTasksWaitingCleanUp>
 bd4:	81 11       	cpse	r24, r1
 bd6:	d8 cf       	rjmp	.-80     	; 0xb88 <prvIdleTask+0x12>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 bd8:	f7 01       	movw	r30, r14
 bda:	80 81       	ld	r24, Z
 bdc:	82 30       	cpi	r24, 0x02	; 2
 bde:	c0 f3       	brcs	.-16     	; 0xbd0 <prvIdleTask+0x5a>
			{
				taskYIELD();
 be0:	03 dc       	rcall	.-2042   	; 0x3e8 <vPortYield>
 be2:	f6 cf       	rjmp	.-20     	; 0xbd0 <prvIdleTask+0x5a>

00000be4 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 be4:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <uxSchedulerSuspended>
 be8:	88 23       	and	r24, r24
 bea:	21 f0       	breq	.+8      	; 0xbf4 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 bec:	81 e0       	ldi	r24, 0x01	; 1
 bee:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xYieldPending>
 bf2:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
 bf4:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <xYieldPending>
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 bf8:	20 91 f6 06 	lds	r18, 0x06F6	; 0x8006f6 <uxTopReadyPriority>
 bfc:	82 2f       	mov	r24, r18
 bfe:	90 e0       	ldi	r25, 0x00	; 0
 c00:	fc 01       	movw	r30, r24
 c02:	ee 0f       	add	r30, r30
 c04:	ff 1f       	adc	r31, r31
 c06:	ee 0f       	add	r30, r30
 c08:	ff 1f       	adc	r31, r31
 c0a:	ee 0f       	add	r30, r30
 c0c:	ff 1f       	adc	r31, r31
 c0e:	e8 0f       	add	r30, r24
 c10:	f9 1f       	adc	r31, r25
 c12:	e4 5d       	subi	r30, 0xD4	; 212
 c14:	f8 4f       	sbci	r31, 0xF8	; 248
 c16:	30 81       	ld	r19, Z
 c18:	31 11       	cpse	r19, r1
 c1a:	11 c0       	rjmp	.+34     	; 0xc3e <vTaskSwitchContext+0x5a>
 c1c:	21 50       	subi	r18, 0x01	; 1
 c1e:	82 2f       	mov	r24, r18
 c20:	90 e0       	ldi	r25, 0x00	; 0
 c22:	fc 01       	movw	r30, r24
 c24:	ee 0f       	add	r30, r30
 c26:	ff 1f       	adc	r31, r31
 c28:	ee 0f       	add	r30, r30
 c2a:	ff 1f       	adc	r31, r31
 c2c:	ee 0f       	add	r30, r30
 c2e:	ff 1f       	adc	r31, r31
 c30:	e8 0f       	add	r30, r24
 c32:	f9 1f       	adc	r31, r25
 c34:	e4 5d       	subi	r30, 0xD4	; 212
 c36:	f8 4f       	sbci	r31, 0xF8	; 248
 c38:	30 81       	ld	r19, Z
 c3a:	33 23       	and	r19, r19
 c3c:	79 f3       	breq	.-34     	; 0xc1c <vTaskSwitchContext+0x38>
 c3e:	ac 01       	movw	r20, r24
 c40:	44 0f       	add	r20, r20
 c42:	55 1f       	adc	r21, r21
 c44:	44 0f       	add	r20, r20
 c46:	55 1f       	adc	r21, r21
 c48:	44 0f       	add	r20, r20
 c4a:	55 1f       	adc	r21, r21
 c4c:	48 0f       	add	r20, r24
 c4e:	59 1f       	adc	r21, r25
 c50:	da 01       	movw	r26, r20
 c52:	a4 5d       	subi	r26, 0xD4	; 212
 c54:	b8 4f       	sbci	r27, 0xF8	; 248
 c56:	11 96       	adiw	r26, 0x01	; 1
 c58:	ed 91       	ld	r30, X+
 c5a:	fc 91       	ld	r31, X
 c5c:	12 97       	sbiw	r26, 0x02	; 2
 c5e:	02 80       	ldd	r0, Z+2	; 0x02
 c60:	f3 81       	ldd	r31, Z+3	; 0x03
 c62:	e0 2d       	mov	r30, r0
 c64:	12 96       	adiw	r26, 0x02	; 2
 c66:	fc 93       	st	X, r31
 c68:	ee 93       	st	-X, r30
 c6a:	11 97       	sbiw	r26, 0x01	; 1
 c6c:	41 5d       	subi	r20, 0xD1	; 209
 c6e:	58 4f       	sbci	r21, 0xF8	; 248
 c70:	e4 17       	cp	r30, r20
 c72:	f5 07       	cpc	r31, r21
 c74:	29 f4       	brne	.+10     	; 0xc80 <vTaskSwitchContext+0x9c>
 c76:	42 81       	ldd	r20, Z+2	; 0x02
 c78:	53 81       	ldd	r21, Z+3	; 0x03
 c7a:	fd 01       	movw	r30, r26
 c7c:	52 83       	std	Z+2, r21	; 0x02
 c7e:	41 83       	std	Z+1, r20	; 0x01
 c80:	fc 01       	movw	r30, r24
 c82:	ee 0f       	add	r30, r30
 c84:	ff 1f       	adc	r31, r31
 c86:	ee 0f       	add	r30, r30
 c88:	ff 1f       	adc	r31, r31
 c8a:	ee 0f       	add	r30, r30
 c8c:	ff 1f       	adc	r31, r31
 c8e:	8e 0f       	add	r24, r30
 c90:	9f 1f       	adc	r25, r31
 c92:	fc 01       	movw	r30, r24
 c94:	e4 5d       	subi	r30, 0xD4	; 212
 c96:	f8 4f       	sbci	r31, 0xF8	; 248
 c98:	01 80       	ldd	r0, Z+1	; 0x01
 c9a:	f2 81       	ldd	r31, Z+2	; 0x02
 c9c:	e0 2d       	mov	r30, r0
 c9e:	86 81       	ldd	r24, Z+6	; 0x06
 ca0:	97 81       	ldd	r25, Z+7	; 0x07
 ca2:	90 93 51 07 	sts	0x0751, r25	; 0x800751 <pxCurrentTCB+0x1>
 ca6:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <pxCurrentTCB>
 caa:	20 93 f6 06 	sts	0x06F6, r18	; 0x8006f6 <uxTopReadyPriority>
 cae:	08 95       	ret

00000cb0 <_exit>:
 cb0:	f8 94       	cli

00000cb2 <__stop_program>:
 cb2:	ff cf       	rjmp	.-2      	; 0xcb2 <__stop_program>
